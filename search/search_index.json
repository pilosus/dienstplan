{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Slack duty rotations made easy","text":"<p><code>dienstplan</code> is a Slack bot for duty rotations.</p>"},{"location":"#why","title":"Why","text":"<ul> <li>Dead simple: a few commands to manage on-call duty rotations in your team's Slack channels</li> <li>Follows the rule \"Do One Thing and Do It Well\"</li> <li>Plays nicely with Slack reminders and workflows</li> <li>Supports crontab for scheduling</li> </ul>"},{"location":"#quick-example","title":"Quick example","text":"<p>Let's create a rotation using <code>dienstplan</code>. Just pass in a <code>create</code> command followed by a rotation name, a list of the channel users in a rotation, and a rotation description:</p> <pre><code>@dienstplan create my-rota @user1 @user2 @user3\nOn-call engineer's duties:\n- Process support team questions queue\n- Resolve service alerts\n- Check service health metrics\n- Casual code refactoring-\n Follow the boy scout rule: always leave the campground cleaner than you found it\n</code></pre> <p>Once the rota is set up, the first user in the list becomes a current on-call person. Check it with a <code>who</code> command:</p> <pre><code>@dienstplan who my-rota\n</code></pre> <p>To change the current on-call person to the next one use <code>rotate</code> command:</p> <pre><code>@dienstplan rotate my-rota\n</code></pre> <p>The bot iterates over the users in the list order:</p> <pre><code>@user1 -&gt; @user2 -&gt;  @user3 -&gt; @user1 ...\n</code></pre> <p>Now that you know the basics, let's automate rotation and current duty notifications with Slack's built-in <code>/remind</code> command. First, set up a reminder to rotate users weekly:</p> <pre><code>/remind #my-channel to \"@dienstplan rotate my-rota\" every Monday at 9AM UTC\n</code></pre> <p>Second, remind duties to a current on-call person:</p> <pre><code>/remind #my-channel to \"@dienstplan who my-rota\" every Monday, Tuesday, Wednesday, Thursday, Friday at 10AM UTC\n</code></pre> <p>If you prefer crontab format for schedule description, use <code>schedule</code> command instead of <code>/remind</code>:</p> <pre><code>@dienstplan schedule create \"rotate my-rota\" 0 9 * * Mon\n@dienstplan schedule create \"who my-rota\" 0 10 * * Mon-Fri\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#server-requirements","title":"Server requirements","text":"<ul> <li><code>Docker</code> or <code>Java 17</code> or higher</li> <li>PostgreSQL 9.4 or higher</li> <li>(Optionally) Sentry account for error tracking</li> </ul> <p>NB! Lower versions may work too, but never tested.</p>"},{"location":"install/#environment-variables","title":"Environment variables","text":"<p>The app relies on the following environment variables (envs) to operate:</p> <ul> <li><code>APP__VERSION</code> - app version, used in Sentry reporting</li> <li><code>APP__ENV</code> [default <code>production</code>] - app environment (e.g. <code>test</code>, <code>stage</code>, <code>production</code>), used in Sentry reporting</li> <li><code>SLACK__TOKEN</code> [default <code>Token</code>] - Slack Bot User OAuth Token (see details in the <code>Slack settings</code> section)</li> <li><code>SLACK__SIGN</code> [default <code>Secret</code>] - Slack Signing Secret key (see details in the <code>Slack settings</code> section)</li> <li><code>ALERTS__SENTRY_DSN</code> - Sentry data source name [default <code>https://public:private@localhost/1</code>]</li> <li><code>SERVER__PORT</code> [default <code>8080</code>] - Jetty application server port</li> <li><code>SERVER__LOGLEVEL</code> [default <code>INFO</code>] - App log level (<code>dienstplan</code> logger only)</li> <li><code>SERVER__ROOTLEVEL</code> [default <code>INFO</code>] - Root log level (all loggers, including DB, Jetty server, etc.)</li> <li><code>SERVER__ACCESS_LOG</code> [default <code>true</code>] - Enable access logging? Access logs have <code>INFO</code> level.</li> <li><code>DAEMON__DELAY</code> [default <code>60</code>] - Delay in seconds for checks in the schedule daemon</li> <li><code>DB__SERVER_NAME</code> [default <code>localhost</code>] - PostgreSQL server host name</li> <li><code>DB__PORT_NUMBER</code> [default <code>5432</code>] - PostgreSQL server port number</li> <li><code>DB__DATABASE_NAME</code> [default <code>dienstplan</code>] - PostgreSQL server database name</li> <li><code>DB__USERNAME</code> [default <code>dienstplan</code>] - PostgreSQL server user name</li> <li><code>DB__PASSWORD</code> [default <code>dienstplan</code>] - PostgreSQL server password</li> <li><code>DB__POOL_MIN_IDLE</code> [default <code>20</code>] - PostgreSQL connection pool's min number of idle connections</li> <li><code>DB__POOL_MAX_SIZE</code> [default <code>20</code>] - PostgreSQL connection pool's max number of connections</li> <li><code>DB__TIMEOUT_MS_CONNECTION</code> [default <code>10000</code>] - PostgreSQL connection timeout in milliseconds</li> <li><code>DB__LIFETIME_MAX_MS_CONNECTION</code> [default <code>1800000</code>] - Maximum lifetime of a connection in the pool in milliseconds</li> <li><code>DB__LIFETIME_KEEPALIVE_MS_CONNECTION</code> [default <code>0</code>] - Keep alive in milliseconds for idle connections in the pool</li> </ul>"},{"location":"install/#deployment-to-production","title":"Deployment to production","text":"<p><code>dienstplan</code> is a Clojure program that can be deployed as:</p> <ul> <li>a <code>Docker</code> container</li> <li><code>jar</code> or <code>uberjar</code> file</li> </ul>"},{"location":"install/#docker","title":"Docker","text":"<p>The easiest option to run an app is by using a Docker image:</p> <pre><code>$ docker pull pilosus/dienstplan:X.Y.Z\n\n$ docker run \\\n  -e APP__VERSION=\"X.Y.Z\" \\\n  -e APP__ENV=\"production\" \\\n  -e APP__DEBUG=false \\\n  -e SLACK__TOKEN=\"xoxb-Your-Bot-User-OAuth-Token\" \\\n  -e SLACK__SIGN=\"Your-Signing-Secret\" \\\n  -e ALERTS__SENTRY_DSN=\"https://public:private@localhost/1\" \\\n  -e SERVER__PORT=8080 \\\n  -e SERVER__LOGLEVEL=INFO \\\n  -e DB__SERVER_NAME=your-postgresql.example.com \\\n  -e DB__PORT_NUMBER=5432 \\\n  -e DB__DATABASE_NAME=\"your-postgresql-db-name\" \\\n  -e DB__USERNAME=\"your-postgresql-db-username\" \\\n  -e DB__PASSWORD=\"your-postgresql-db-passwords\" \\\n  -it --rm pilosus/dienstplan:X.Y.Z \\\n  java -jar app.jar --mode server\n</code></pre> <p>For database migrations and rollbacks instead of <code>java -jar app.jar --mode server</code> entypoint use:</p> <ul> <li><code>java -jar app.jar --mode migrate</code></li> <li><code>java -jar app.jar --mode rollback</code></li> </ul> <p>For schedules processing as one-time job use:</p> <ul> <li><code>java -jar app.jar --mode schedule</code></li> </ul> <p>For schedules processing as a background running worker (daemon) use:</p> <ul> <li><code>java -jar app.jar --mode schedule-daemon</code></li> </ul> <p>It's recommended to use a SemVer tag matching the latest release for a Docker image (e.g. <code>pilosus/dienstplan:X.Y.Z</code>). Do not rely on the <code>pilosus/dienstplan:latest</code> unless you know what you are doing!</p>"},{"location":"install/#jar-file","title":"Jar file","text":"<ul> <li>Get Clojure to compile a standalone <code>jar</code> file</li> <li>Clone the GitHub repository with <code>git clone git@github.com:pilosus/dienstplan.git</code></li> <li>In the repo directory complile a standalone <code>jar</code> file with <code>make uberjar</code></li> <li>Run the app:</li> </ul> <pre><code>$ APP__DEBUG=false \\\n  SLACK__TOKEN=\"xoxb-Your-Bot-User-OAuth-Token\" \\\n  SLACK__SIGN=\"Your-Signing-Secret\" \\\n  ALERTS__SENTRY_DSN=\"https://public:private@localhost/1\" \\\n  SERVER__PORT=8080 \\\n  SERVER__LOGLEVEL=INFO \\\n  DB__SERVER_NAME=your-postgresql.example.com \\\n  DB__PORT_NUMBER=5432 \\\n  DB__DATABASE_NAME=\"your-postgresql-db-name\" \\\n  DB__USERNAME=\"your-postgresql-db-username\" \\\n  DB__PASSWORD=\"your-postgresql-db-passwords\" \\\n  java -jar /path/to/repo/target/uberjar/dienstplan-X.Y.Z-standalone.jar\n</code></pre> <p>For database migrations and rollbacks instead of <code>java -jar dienstplan-X.Y.Z-standalone.jar</code> entypoint use:</p> <ul> <li><code>java -jar dienstplan-X.Y.Z-standalone.jar --mode migrate</code></li> <li><code>java -jar dienstplan-X.Y.Z-standalone.jar --mode rollback</code></li> </ul> <p>For schedules processing as one-time job use:</p> <ul> <li><code>java -jar dienstplan-X.Y.Z-standalone.jar --mode schedule</code></li> </ul> <p>For schedules processing as a daemon use:</p> <ul> <li><code>java -jar dienstplan-X.Y.Z-standalone.jar --mode schedule-daemon</code></li> </ul>"},{"location":"install/#ansible-playbook","title":"Ansible Playbook","text":"<p>You can get a full set of installation scripts needed to:</p> <ul> <li>Provision a GNU/Linux server from scratch</li> <li>Set up the <code>dienstplan</code> bot app as a <code>systemd</code> service</li> <li>Apply database migrations automatically as a <code>systemd</code> service</li> <li>Run the app</li> </ul> <p>in the dienstplan-deploy repository.</p>"},{"location":"install/#running-locally","title":"Running locally","text":"<p>The app can be run locally with <code>Docker Compose</code> with:</p> <pre><code>make build\nmake up\nmake migrate\n</code></pre> <p>These will build a Docker container, start the app and the database locally, and apply database migrations.</p> <p>Another way to run the app is with Clojure CLI:</p> <pre><code>clojure M:run\n</code></pre> <p>Schedules processing as a one-time job can be done:</p> <pre><code>make schedule\n</code></pre> <p>or</p> <pre><code>clojure -X:schedule\n</code></pre> <p>Scheduling processing as a daemon (background worker) can be done:</p> <pre><code>make daemon\n</code></pre> <p>or</p> <pre><code>clojure -X:schedule-daemon\n</code></pre> <p>Don't forget to use envs to configure the app properly.</p>"},{"location":"install/#extra-configs","title":"Extra configs","text":"<p>Java system properties allow to configure some extra behaviours of the app.  System properties can be passed as an option <code>-Dproperty.name=property.value</code> in <code>java</code> invocation:</p> <pre><code>java -Dproperty.name=property.value -jar app.jar\n</code></pre> <p>including in Docker entrypoints:</p> <pre><code>docker run -it --rm pilosus/dienstplan:X.Y.Z java -Dproperty.name=property.value -jar app.jar\n</code></pre>"},{"location":"install/#logging","title":"Logging","text":"<p>By default, logs are printed to the standard output in plain text format. It may be optimal for local development or staging environment, but structured logging with JSON stream of events suits best production grade installations. To enable logging in JSON format use the following system props:</p> <pre><code>java -Dlogback.configurationFile=resources/logback.json.xml ...\n</code></pre> <p>Custom logging configs can be written and passed in to the app using the same system property. See the logback manual for more details.</p>"},{"location":"install/#socket-server","title":"Socket Server","text":"<p>Clojure allows to start a socket server at initialization using system properties:</p> <pre><code>java -Dclojure.server.repl=\"{:port 5555 :accept clojure.core.server/repl} ...\"\n</code></pre> <p>See the guide for more details.</p>"},{"location":"install/#slack-settings","title":"Slack settings","text":"<p>In order to install the app in your Slack workspace, do the following:</p> <ul> <li>Sign in to your Slack Apps Dashboard</li> <li><code>Create New App</code> -&gt; <code>From an app manifest</code> -&gt; <code>Workspace: your workspace</code></li> <li>Copy and paste the app manifest in YAML format:</li> </ul> <pre><code>_metadata:\n  major_version: 1\n  minor_version: 1\ndisplay_information:\n  name: dienstplan\n  description: Slack bot for duty rotations\n  background_color: \"#002087\"\nfeatures:\n  bot_user:\n    display_name: dienstplan\n    always_online: false\noauth_config:\n  scopes:\n    bot:\n      - app_mentions:read\n      - channels:read\n      - chat:write\n      - chat:write.customize\nsettings:\n  event_subscriptions:\n    request_url: https://YOUR-DOMAIN/api/events\n    bot_events:\n      - app_mention\n  org_deploy_enabled: false\n  socket_mode_enabled: false\n  token_rotation_enabled: false\n</code></pre> <ul> <li>Fix <code>settings -&gt; event_subscriptions -&gt; request_url</code> to match your server's public url (<code>/api/events</code> url path is hardcoded in the app)</li> <li><code>Basic Information</code> -&gt; <code>Install your app</code> -&gt; <code>Install to Workspace</code></li> <li><code>OAuth &amp; Permissions</code> -&gt; copy <code>OAuth Tokens for Your Workspace</code> to be used for <code>SLACK__TOKEN</code> environment variable</li> <li><code>Basic Information</code> -&gt; <code>App Credentials</code> -&gt; copy <code>Signing Secret</code> to be used for <code>SLACK__SIGN</code> environment variable</li> <li>Make it looking nice: <code>Basic Information</code> -&gt; <code>Display Information</code> -&gt; upload an app icon with a public domain license</li> <li>Deploy the app</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>To start interacting with the Slack bot, mention its username, provide a command and its arguments as follows:</p> <pre><code>@dienstplan &lt;command&gt; [&lt;options&gt;]\n</code></pre>"},{"location":"usage/#definitions","title":"Definitions","text":"<p><code>Rotation</code>, or <code>rota</code> - a named duty with a duties description and a list of user mentions in the order of their duty schedule.</p> <p><code>Duty</code>, or <code>on-call person</code>, or <code>duty person</code> - a user who is currently an on-call person, i.e. on duty.</p> <p><code>Mention</code> - a user tagged in Slack (username prepended with the <code>@</code> character). Used interchargably with a word <code>User</code> or a phrase <code>User mention</code>.</p> <p><code>Schedule</code> - a scheduled event that has an <code>executable</code> (a text command as if it were sent by a user to the Slack bot) and a <code>crontab</code> string (scheduling in the crontab file format).</p>"},{"location":"usage/#commands","title":"Commands","text":"<p>The commands work on the Slack channel basis, meaning that a rotation must be unique for a channel and cannot be global (available for all the channels) for a workspace.</p>"},{"location":"usage/#create","title":"Create","text":"<p>Create a new rotation:</p> <pre><code>@dienstplan create &lt;rotation name&gt; &lt;list of user mentions&gt; &lt;duties description&gt;\n</code></pre> <p>A rotation must have a unique name within the current Slack channel.</p> <p>Upon the rota creation, current duty is assigned to the first user in the given list.</p>"},{"location":"usage/#rotate","title":"Rotate","text":"<p>Move the currenty duty to a next user:</p> <pre><code>@dienstplan rotate &lt;rotation name&gt;\n</code></pre> <p>Duty is rotated in a round-robin cyclic manner. E.g. for a newly created rota with the following user mentions:</p> <pre><code>user1, user2, user3\n</code></pre> <p>duty rotation is done in the following order:</p> <pre><code>user1 -&gt; user2 -&gt; user3 -&gt; user1 -&gt; user2 -&gt; ...\n</code></pre>"},{"location":"usage/#who","title":"Who","text":"<p>Show a current duty along with its duties description:</p> <pre><code>@dienstplan who &lt;rotation name&gt;\n</code></pre>"},{"location":"usage/#shout","title":"Shout","text":"<p>Show a current duty:</p> <pre><code>@dienstplan shout &lt;rotation name&gt;\n</code></pre> <p>The command is an analogue to the <code>who</code> command but with the duties description omitted.</p>"},{"location":"usage/#assign","title":"Assign","text":"<p>Assign a specific user for a duty:</p> <pre><code>@dienstplan assign &lt;rotation name&gt; &lt;user mention&gt;\n</code></pre> <p>Used to temporarily overcome the natural order of user mentions for the rota, e.g. when a current duty is on the sick leave or holidays.</p>"},{"location":"usage/#about","title":"About","text":"<p>Show details about a rota:</p> <pre><code>@dienstplan about &lt;rotation name&gt;\n</code></pre>"},{"location":"usage/#delete","title":"Delete","text":"<p>Delete a rotation:</p> <pre><code>@dienstplan delete &lt;rotation name&gt;\n</code></pre>"},{"location":"usage/#update","title":"Update","text":"<p>Update a rotation:</p> <pre><code>@dienstplan update &lt;rotation name&gt; &lt;list of user mentions&gt; &lt;duties description&gt;\n</code></pre> <p>Watch out! The command overwrites the existing rota so that the current duty will be assigned to the first user mention as if the rotation was created anew. Consider <code>update</code> command to be a a shortcut to a sequence of <code>delete</code> and <code>create</code> commands.</p>"},{"location":"usage/#list","title":"List","text":"<p>List all rotation names along with their dates of creation for the current channel:</p> <pre><code>@dienstplan list\n</code></pre> <p>Watch out! The list is limited to 500 rotations.</p>"},{"location":"usage/#schedule","title":"Schedule","text":"<p>A meta-command to create, delete or list schedules.</p> <pre><code>@dienstplan schedule &lt;subcommand&gt; \"&lt;executable&gt;\" &lt;crontab&gt;\n</code></pre> <p>where:</p> <ul> <li><code>&lt;subcommand&gt;</code> is one of: <code>[create, delete, list, explain]</code></li> <li><code>\"&lt;executalbe&gt;\"</code> is a command for a bot to run on schedule</li> <li><code>&lt;crontab&gt;</code> is a crontab file line in   vixie-cron   format, e.g. <code>0 9 * * Mon-Fri</code></li> </ul> <p>caveats:</p> <p><code>\"&lt;executable&gt;\"</code> must be enclosed in the double quotation marks!</p>"},{"location":"usage/#create_1","title":"Create","text":"<p>Create a new schedule in the channel:</p> <pre><code>@dienstplan schedule create \"rotate my-rota\" 0 7 * * Mon-Fri\n</code></pre> <p>Schedules are unique within a channel, i.e. there could be only a single <code>rotate my-rota</code> in <code>my-channel</code>, no matter what <code>crontab</code> is used for the schedule.</p>"},{"location":"usage/#delete_1","title":"Delete","text":"<p>Delete a schedule in the channel:</p> <pre><code>@dienstplan schedule delete \"rotate my-rota\"\n</code></pre>"},{"location":"usage/#list_1","title":"List","text":"<p>List all the schedules in the channel:</p> <pre><code>@dienstplan schedule list\n</code></pre>"},{"location":"usage/#explain","title":"Explain","text":"<p>Explain a given <code>crontab</code> in plain English, e.g.:</p> <pre><code>@dienstplan schedule explain 0 22 * */2 Mon-Fri\n</code></pre> <p>returns:</p> <pre><code>Crontab `0 22 * */2 Mon-Fri` means the executable will be run at minute 0, past hour 22, on every day of week from Monday through Friday, in every 2nd month\n</code></pre>"},{"location":"usage/#help","title":"Help","text":"<p>Show a help message for the bot:</p> <pre><code>@dienstplan help\n</code></pre>"}]}