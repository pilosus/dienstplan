;; See for more deps.edn inspiration:
;; https://github.com/practicalli/clojure-cli-config
;; https://github.com/seancorfield/dot-clojure

{:paths ["src" "resources"]
 :deps
 { ;; Clojure
  org.clojure/clojure {:mvn/version "1.11.1"}
  org.clojure/tools.cli {:mvn/version "1.0.219"}

  ;; Web framework
  ring/ring-core {:mvn/version "1.10.0"}
  ring/ring-jetty-adapter {:mvn/version "1.10.0"}
  ring/ring-json {:mvn/version "0.5.1"}

  ;; Routing
  bidi/bidi {:mvn/version "2.1.6"}

  ;; Logging
  org.clojure/tools.logging {:mvn/version "1.2.4"}
  ch.qos.logback/logback-classic {:mvn/version "1.4.8"}
  ch.qos.logback.contrib/logback-json-classic {:mvn/version "0.1.5"}
  ch.qos.logback.contrib/logback-jackson {:mvn/version "0.1.5"}
  com.fasterxml.jackson.core/jackson-databind {:mvn/version "2.15.2"}

  ;; Alerts
  io.sentry/sentry-clj {:mvn/version "6.26.199"}

  ;; Validation
  expound/expound {:mvn/version "0.9.0"}

  ;; Config managements
  exoscale/yummy {:mvn/version "0.2.12"}
  mount/mount {:mvn/version "0.1.17"}

  ;; HTTP client
  clj-http/clj-http {:mvn/version "3.12.3"}

  ;; JSON parsing
  cheshire/cheshire {:mvn/version "5.11.0"}

  ;; DB
  com.github.seancorfield/next.jdbc {:mvn/version "1.3.883"}
  org.postgresql/postgresql {:mvn/version "42.6.0"}
  com.zaxxer/HikariCP {:mvn/version "5.0.1"}
  dev.weavejester/ragtime {:mvn/version "0.9.3"}
  com.github.seancorfield/honeysql {:mvn/version "2.4.1045"}

  ;; Cron
  org.pilosus/kairos {:mvn/version "0.1.14"}

  ;; Cryptography
  buddy/buddy-core {:mvn/version "1.11.423"}}
 :aliases
 {
  ;; Building
  ;; clojure -T:build (clean|jar|uberjar)
  :build
  {:replace-deps {io.github.clojure/tools.build {:git/tag "v0.9.4" :git/sha "76b78fe"}}
   :ns-default build}

  ;; Running
  ;; clojure -M:run
  :run
  {:main-opts ["-m" "dienstplan.core"]
   :exec-fn dienstplan.core/-main
   ;; See other logging configs under resources/logback.*.xml
   :jvm-opts ["-Dlogback.configurationFile=resources/logback.xml"]}

  ;; clojure -X:schedule
  :schedule
  {:exec-fn dienstplan.schedule/run}

  ;; Dev
  :dev
  {:extra-deps
   {io.github.athos/clj-check {:git/tag "0.1.0" :git/sha "0ca84df"}
    cloverage/cloverage {:mvn/version "1.2.4"}
    jonase/eastwood {:mvn/version "1.4.0"}
    io.github.weavejester/cljfmt {:git/tag "0.11.1" :git/sha "0882f99"}
    io.github.cognitect-labs/test-runner {:git/tag "v0.5.1" :git/sha "dfb30dd"}
    nrepl/nrepl {:mvn/version "1.0.0"}
    cider/cider-nrepl {:mvn/version "0.32.0"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}
    org.clojure/test.check {:mvn/version "1.1.1"}}}

  ;; REPL
  ;; clojure -M:dev:repl
  :repl
  {:main-opts
   ["-e" "(apply require clojure.main/repl-requires)"
    "--main" "nrepl.cmdline"
    "--middleware" "[cider.nrepl/cider-middleware]"
    "--interactive"
    "-f" "rebel-readline.main/-main"
    "--port" "6543"
    ;; make sure connection to REPL in Docker works
    "--bind" "0.0.0.0"]}

  ;; clojure -M:dev:repl-remote --host hostname --port 12345
  :repl-remote
  {:main-opts
   ["-e" "(apply require clojure.main/repl-requires)"
    "--main" "nrepl.cmdline"
    "--connect"
    "--middleware" "[cider.nrepl/cider-middleware]"
    "--interactive"
    "-f" "rebel-readline.main/-main"]}

  ;; DB migrations
  ;; clojure -X:migrate
  :migrate
  {:exec-fn dienstplan.db/migrate}

  ;; clojure -X:rollback
  :rollback
  {:exec-fn dienstplan.db/rollback}

  ;; Testing
  ;; clojure -X:dev:test
  :test {:extra-paths ["test"]
         :main-opts ["-m" "cognitect.test-runner"]
         :exec-fn cognitect.test-runner.api/test}

  ;; clojure -X:dev:test:cloverage
  :cloverage
  {:exec-fn cloverage.coverage/run-project
   :exec-args
   {:fail-threshold 85
    :codecov? true
    :exclude-call
    [clojure.tools.logging/logf
     clojure.tools.logging/logp]

    :src-ns-path
    ["src"]

    :test-ns-path
    ["test"]}}

  ;; Linting

  ;; package checker
  ;; clojure -M:dev:check
  :check
  {:main-opts ["-m" "clj-check.check"]}

  ;; linter
  ;; clojure -M:dev:eastwood
  :eastwood
  {:main-opts ["-m"
               "eastwood.lint"]}

  ;; code formatting
  ;; clojure -X:dev:cljfmtfix
  :cljfmtfix
  {:exec-fn cljfmt.tool/fix
   :exec-args {}}

  ;; clojure -X:dev:cljfmtcheck
  :cljfmtcheck
  {:exec-fn cljfmt.tool/check
   :exec-args {}}

  ;; Dependency bumps
  ;; clojure -T:outdated
  ;; clojure -T:outdated :upgrade true :force true
  :outdated
  {:replace-paths ["."]
   :replace-deps  {com.github.liquidz/antq {:mvn/version "2.5.1095"}
                   org.slf4j/slf4j-nop {:mvn/version "2.0.7"}}
   :exec-fn antq.tool/outdated
   :exec-args {:directory ["."] ;; default
               :exclude ["org.clojure/tools.deps.alpha"]
               ;; :focus ["com.github.liquidz/antq"]
               :skip ["boot" "leiningen"]
               :reporter "table" ;; json edn format
               :verbose false
               :upgrade false
               :force false}}

  ;; Vulnerability scanner
  ;; software composition analysis (SCA) for Clojure deps
  ;; clojure -T:watson
  ;; https://github.com/clj-holmes/clj-watson
  :watson
  {:replace-paths ["."]
   :replace-deps {io.github.clj-holmes/clj-watson {:git/tag "v4.1.3" :git/sha "56dfd3e"}}
   :main-opts ["-m" "clj-watson.cli" "scan"]
   :exec-fn clj-watson.entrypoint/scan
   :exec-args {:output "stdout"
               :dependency-check-properties nil
               :fail-on-result true
               :deps-edn-path "deps.edn"
               :suggest-fix true
               :aliases ["*"]
               :database-strategy "dependency-check"}}
  }}
